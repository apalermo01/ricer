import json
import logging
import os
import subprocess

import matplotlib.pyplot as plt

from ricer.utils.types import (
    BaseToolConfig,
    ThemeContext,
    ThemeData,
    ToolResult,
    UserConfig,
)

logger = logging.getLogger(__name__)


class ColorsConfig(BaseToolConfig):
    pass


def parse_colors(
    theme_data: ThemeData,
    theme_context: ThemeContext,
    user_config: UserConfig,
    install_script: str,
) -> ToolResult:
    # if this function is running, then we MUST have passed colors in the
    # theme config
    assert theme_data["colors"]

    theme_path = theme_context["theme_path"]
    logger.info(f"configuring colors for {theme_path}")
    allowed_methods: list[str] = ["manual", "pywal"]
    method: str = theme_data["colors"].get("method", "manual")

    if method not in allowed_methods:
        raise ValueError(
            "method not supported. Expected one of: "
            + ", ".join(allowed_methods)
            + f" but got {method}"
        )

    colorscheme_path: str = os.path.join(theme_path, "colors")

    if not os.path.exists(colorscheme_path):
        os.makedirs(colorscheme_path)

    if method == "pywal":
        assert "wallpaper" in theme_data
        assert isinstance(theme_data['wallpaper'], dict)
        assert 'file' in theme_data['wallpaper']


        # if just the filename was given, look in the project'
        # wallpaper folder:
        if user_config.get('wallpaper_path'):
            assert isinstance(user_config['wallpaper_path'], str)
            wallpaper_path = os.path.expanduser(user_config['wallpaper_path'])
        else:
            wallpaper_path = os.path.join(os.getcwd(), "wallpapers")
        wallpaper_file: str = os.path.join(wallpaper_path, theme_data["wallpaper"]["file"])
        print(f"wallpaper file = {wallpaper_file}")
        pallet = _configure_pywal_colors(wallpaper_file)

        # add some additional default colors
        if "red" not in pallet:
            pallet["red"] = "#ff0000"
        _write_pallet_to_colorscheme(pallet, colorscheme_path)

    with open(os.path.join(colorscheme_path, "colorscheme.json"), "r") as f:
        colorscheme = json.load(f)

    make_pallet_image(colorscheme, theme_path)
    return {
        "theme_data": theme_data,
        "install_script": install_script,
        "destination_path": "",
    }
    return {"theme_data": theme_data, "install_script": install_script}


def _write_pallet_to_colorscheme(pallet: dict, colorscheme_path: str):
    # if not os.path.exists(colorscheme_path):
    with open(os.path.join(colorscheme_path, "colorscheme.json"), "w") as f:
        json.dump(pallet, f, indent=2)

    # else:
    #     with open(colorscheme_path, "r") as f:
    #         scheme = json.load(f)
    #     for key in pallet:
    #         scheme[key] = pallet[key]
    #     with open(colorscheme_path, "w") as f:
    #         json.dump(scheme, f, indent=2)


def _configure_pywal_colors(wallpaper_path: str) -> dict[str, str]:
    """Generate a color pallet using pywal.

    Parameters
    ----------
    wallpaper_path : str
        path to the wallpaper
    """

    # run pywal in the shell
    subprocess.run(
        ["wal", "-n", "-e", "-s", "-i", wallpaper_path], capture_output=False
    )
    logger.debug(f"ran pywal on {wallpaper_path}")

    # get the colors file generated by pywal
    colors_file = os.path.expanduser("~/.cache/wal/colors.json")

    with open(colors_file, "r") as f:
        pywal_colors = json.load(f)

    logger.debug(f"colors file: {json.dumps(pywal_colors, indent=2)}")

    pallet = {}
    for s in pywal_colors["special"]:
        pallet[s] = pywal_colors["special"][s]
    for c in pywal_colors["colors"]:
        pallet[c] = pywal_colors["colors"][c]

    logger.debug("pallet configuration successful")

    return pallet


def make_pallet_image(pallet: dict, theme_path):
    """Generate an image out of all the colors in the pallet.

    Parameters
    ----------
    pallet : Dict
        Dictionary of hex colors
    """

    total_colors = len(pallet)
    nrows = (total_colors + 1) // 2
    ncols = 2
    colors_list = list(pallet.values())
    titles = list(pallet.keys())
    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(6, 2 * nrows))
    axes = axes.flatten()
    for i, color in enumerate(colors_list):
        axes[i].set_facecolor(color)
        axes[i].xaxis.set_visible(False)
        axes[i].yaxis.set_visible(False)
        axes[i].set_title(f"{titles[i]}: {color}")
    fig.suptitle("Color Palette", fontsize=14)

    plt.savefig(os.path.join(theme_path, "pallet.png"), dpi=300, bbox_inches="tight")
